type Device
  @model
  @auth(rules: [ { allow: private, provider: userPools } ])
{
  id: ID!
  name: String!
  pinned: String!
  certificates: [Certificate] @hasMany(indexName: "byDevice", fields: ["id"])
  currentMeasurement: CurrentMeasurement @hasOne(fields: ["id"])
}

type CurrentMeasurement
  @model(timestamps: null)
  @auth(rules: [ { allow: private, provider: userPools } ])
{
  deviceID: ID! @primaryKey
  timestamp: AWSDateTime!
  temperature: Float!
  humid: Float!
  pressure: Float!
}

type Measurement
  @model(timestamps: null)
  @auth(rules: [ { allow: private, provider: userPools } ])
{
  deviceID: ID! @primaryKey(sortKeyFields: ["timestamp"])
  timestamp: AWSDateTime!
  temperature: Float!
  humid: Float!
  pressure: Float!
}

type Certificate
  @model
  @auth(rules: [
    { allow: private, provider: userPools }
    { allow: private, provider: iam ,operations:[create, delete] }
  ])
{
  id: ID!
  deviceID: ID! @index(name: "byDevice", sortKeyFields: ["certificateId"])
  certificateId: String!
  certificateArn: String!
  certificatePem: String
  privateKey: String
  publicKey: String
  device: Device! @belongsTo(fields: ["deviceID"])
}

type Endpoint
{
  address: String!
}

type Query {
  endpointIoT: Endpoint
    @function(name: "endpointIoTCore-${env}")
    @auth(rules: [ { allow: private, provider: userPools } ])
}

type Mutation {
  createCertificateIoT(deviceID: ID!): Certificate
    @function(name: "createCertificateIoTCore-${env}")
    @auth(rules: [ { allow: private, provider: userPools } ])
  deleteCertificateIoT(id: ID!): Certificate
    @function(name: "deleteCertificateIoTCore-${env}")
    @auth(rules: [ { allow: private, provider: userPools } ])
}
